{"ast":null,"code":"// registerUser\nimport { GET_USER_INFO_FAILURE, GET_USER_INFO_REQUEST, GET_USER_INFO_SUCCESS, LOGIN_USER_FAILURE, LOGIN_USER_REQUEST, LOGIN_USER_SUCCESS, LOGOUT_USER, REGISTER_USER_FAILURE, REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, UPDATE_ADDRESS_FAILURE, UPDATE_ADDRESS_REQUEST, UPDATE_ADDRESS_SUCCESS } from \"./users.actionTypes\";\nimport Axios from \"axios\";\nimport { setAlert } from \"../layout/layout.actions\";\nimport { setAuthToken } from \"../../util/setAuthToken\"; // register a user\n\nlet registerUser = (user, history) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: REGISTER_USER_REQUEST\n      });\n      let config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      let response = await Axios.post('/user/register', JSON.stringify(user), config);\n      dispatch({\n        type: REGISTER_USER_SUCCESS,\n        payload: response.data\n      });\n      dispatch(setAlert('Registration Success', 'success'));\n      history.push('/users/login');\n    } catch (error) {\n      console.log(error.response.data.errors);\n      let errorList = error.response.data.errors;\n      await errorList.forEach(alert => dispatch(setAlert(alert.msg, 'danger')));\n      dispatch({\n        type: REGISTER_USER_FAILURE,\n        payload: error\n      });\n    }\n  };\n}; // login a user\n\n\nlet loginUser = (user, history) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: LOGIN_USER_REQUEST\n      });\n      let config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      let response = await Axios.post('/user/login', JSON.stringify(user), config);\n      dispatch({\n        type: LOGIN_USER_SUCCESS,\n        payload: response.data\n      });\n      dispatch(setAlert('Login Success', 'success'));\n\n      if (localStorage.token) {\n        dispatch(getUserInfo());\n      }\n\n      history.push('/');\n    } catch (error) {\n      console.log(error.response.data.errors);\n      let errorList = error.response.data.errors;\n      await errorList.forEach(alert => dispatch(setAlert(alert.msg, 'danger')));\n      dispatch({\n        type: LOGIN_USER_FAILURE,\n        payload: error\n      });\n    }\n  };\n}; // get User Info\n\n\nlet getUserInfo = () => {\n  return async dispatch => {\n    try {\n      if (localStorage.token) {\n        setAuthToken(localStorage.getItem('token'));\n      }\n\n      dispatch({\n        type: GET_USER_INFO_REQUEST\n      });\n      let response = await Axios.get('/user/');\n      dispatch({\n        type: GET_USER_INFO_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_USER_INFO_FAILURE,\n        payload: error\n      });\n    }\n  };\n}; // UPDATE USER ADDRESS\n\n\nlet updateUserAddress = address => {\n  return async dispatch => {\n    try {\n      if (localStorage.token) {\n        setAuthToken(localStorage.getItem('token'));\n      }\n\n      let config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      dispatch({\n        type: UPDATE_ADDRESS_REQUEST\n      });\n      let response = await Axios.post('/user/address', JSON.stringify(address), config);\n      dispatch({\n        type: UPDATE_ADDRESS_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: UPDATE_ADDRESS_FAILURE,\n        payload: error\n      });\n    }\n  };\n}; // logOutUser\n\n\nlet logOut = history => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: LOGOUT_USER\n      });\n      dispatch(setAlert('Logout is Success', 'success'));\n      history.push('/');\n    } catch (error) {\n      console.error(error);\n    }\n  };\n};\n\nexport { registerUser, loginUser, getUserInfo, logOut, updateUserAddress };","map":{"version":3,"sources":["C:/Users/HP/Desktop/G Store/client/src/redux/users/users.actions.js"],"names":["GET_USER_INFO_FAILURE","GET_USER_INFO_REQUEST","GET_USER_INFO_SUCCESS","LOGIN_USER_FAILURE","LOGIN_USER_REQUEST","LOGIN_USER_SUCCESS","LOGOUT_USER","REGISTER_USER_FAILURE","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","UPDATE_ADDRESS_FAILURE","UPDATE_ADDRESS_REQUEST","UPDATE_ADDRESS_SUCCESS","Axios","setAlert","setAuthToken","registerUser","user","history","dispatch","type","config","headers","response","post","JSON","stringify","payload","data","push","error","console","log","errors","errorList","forEach","alert","msg","loginUser","localStorage","token","getUserInfo","getItem","get","updateUserAddress","address","logOut"],"mappings":"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","sourcesContent":["// registerUser\r\nimport {\r\n    GET_USER_INFO_FAILURE,\r\n    GET_USER_INFO_REQUEST, GET_USER_INFO_SUCCESS,\r\n    LOGIN_USER_FAILURE,\r\n    LOGIN_USER_REQUEST, LOGIN_USER_SUCCESS, LOGOUT_USER,\r\n    REGISTER_USER_FAILURE,\r\n    REGISTER_USER_REQUEST,\r\n    REGISTER_USER_SUCCESS, UPDATE_ADDRESS_FAILURE, UPDATE_ADDRESS_REQUEST, UPDATE_ADDRESS_SUCCESS\r\n} from \"./users.actionTypes\";\r\nimport Axios from \"axios\";\r\nimport {setAlert} from \"../layout/layout.actions\";\r\nimport {setAuthToken} from \"../../util/setAuthToken\";\r\n\r\n// register a user\r\nlet registerUser = (user, history) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({type : REGISTER_USER_REQUEST});\r\n            let config = {\r\n                headers : {\r\n                    'Content-Type' : 'application/json'\r\n                }\r\n            };\r\n            let response = await Axios.post('/user/register', JSON.stringify(user) , config);\r\n            dispatch({type : REGISTER_USER_SUCCESS , payload : response.data});\r\n            dispatch(setAlert('Registration Success' , 'success'));\r\n            history.push('/users/login');\r\n        }\r\n        catch (error) {\r\n            console.log(error.response.data.errors);\r\n            let errorList = error.response.data.errors;\r\n            await errorList.forEach(alert => dispatch(setAlert(alert.msg, 'danger')));\r\n            dispatch({type : REGISTER_USER_FAILURE, payload: error});\r\n        }\r\n    }\r\n};\r\n\r\n// login a user\r\nlet loginUser = (user, history) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({type : LOGIN_USER_REQUEST});\r\n            let config = {\r\n                headers : {\r\n                    'Content-Type' : 'application/json'\r\n                }\r\n            };\r\n            let response = await Axios.post('/user/login', JSON.stringify(user) , config);\r\n            dispatch({type : LOGIN_USER_SUCCESS , payload : response.data});\r\n            dispatch(setAlert('Login Success' , 'success'));\r\n            if(localStorage.token){\r\n                dispatch(getUserInfo());\r\n            }\r\n            history.push('/');\r\n        }\r\n        catch (error) {\r\n            console.log(error.response.data.errors);\r\n            let errorList = error.response.data.errors;\r\n            await errorList.forEach(alert => dispatch(setAlert(alert.msg, 'danger')));\r\n            dispatch({type : LOGIN_USER_FAILURE, payload: error});\r\n        }\r\n    }\r\n};\r\n\r\n// get User Info\r\nlet getUserInfo = () => {\r\n    return async (dispatch) => {\r\n        try {\r\n            if(localStorage.token){\r\n                setAuthToken(localStorage.getItem('token'));\r\n            }\r\n            dispatch({type : GET_USER_INFO_REQUEST});\r\n            let response = await Axios.get('/user/');\r\n            dispatch({type : GET_USER_INFO_SUCCESS , payload : response.data});\r\n        }\r\n        catch (error) {\r\n            dispatch({type : GET_USER_INFO_FAILURE , payload : error});\r\n        }\r\n    }\r\n};\r\n\r\n// UPDATE USER ADDRESS\r\nlet updateUserAddress = (address) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            if(localStorage.token){\r\n                setAuthToken(localStorage.getItem('token'));\r\n            }\r\n            let config = {\r\n                headers : {\r\n                    'Content-Type' : 'application/json'\r\n                }\r\n            };\r\n            dispatch({type : UPDATE_ADDRESS_REQUEST});\r\n            let response = await Axios.post('/user/address' , JSON.stringify(address) , config);\r\n            dispatch({type : UPDATE_ADDRESS_SUCCESS , payload : response.data});\r\n        }\r\n        catch (error) {\r\n            dispatch({type : UPDATE_ADDRESS_FAILURE , payload : error});\r\n        }\r\n    }\r\n};\r\n\r\n// logOutUser\r\nlet logOut = (history) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({type : LOGOUT_USER});\r\n            dispatch(setAlert('Logout is Success' , 'success'));\r\n            history.push('/');\r\n        }\r\n        catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n};\r\n\r\nexport {registerUser, loginUser , getUserInfo, logOut, updateUserAddress};\r\n"]},"metadata":{},"sourceType":"module"}