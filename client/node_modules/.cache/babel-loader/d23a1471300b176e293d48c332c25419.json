{"ast":null,"code":"// add to Cart\nimport { ADD_TO_CART_FAILURE, ADD_TO_CART_REQUEST, ADD_TO_CART_SUCCESS, CLEAR_CART_ITEMS, DECR_PRODUCT_QTY, DELETE_PRODUCT_FROM_CART, GET_ALL_ORDERS_FAILURE, GET_ALL_ORDERS_REQUEST, GET_ALL_ORDERS_SUCCESS, INCR_PRODUCT_QTY, PLACE_ORDER_FAILURE, PLACE_ORDER_REQUEST, PLACE_ORDER_SUCCESS } from \"./orders.actionTypes\";\nimport { STRIPE_PAYMENT_FAILURE, STRIPE_PAYMENT_REQUEST, STRIPE_PAYMENT_SUCCESS } from \"../products/products.actionTypes\";\nimport Axios from \"axios\";\nimport { setAlert } from \"../layout/layout.actions\"; // add an item to cart\n\nlet addToCart = (selectedProduct, qty, history) => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: ADD_TO_CART_REQUEST\n      });\n      let theProduct = { ...selectedProduct,\n        qty: qty === '' ? 1 : Number(qty)\n      };\n      dispatch({\n        type: ADD_TO_CART_SUCCESS,\n        payload: theProduct\n      });\n      history.push('/orders/cart');\n    } catch (error) {\n      dispatch({\n        type: ADD_TO_CART_FAILURE,\n        payload: error\n      });\n    }\n  };\n}; // incrProductQty\n\n\nlet incrProductQty = productId => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: INCR_PRODUCT_QTY,\n        payload: {\n          productId: productId\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}; // decrProductQty\n\n\nlet decrProductQty = productId => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: DECR_PRODUCT_QTY,\n        payload: {\n          productId: productId\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}; // delete Product From Cart\n\n\nlet deleteProductFromCart = productId => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: DELETE_PRODUCT_FROM_CART,\n        payload: {\n          productId: productId\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}; // place an Order\n\n\nlet placeOrder = (order, history) => {\n  return async dispatch => {\n    try {\n      let config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      dispatch({\n        type: PLACE_ORDER_REQUEST\n      });\n      let response = await Axios.post(`/order/`, JSON.stringify(order), config);\n      dispatch({\n        type: PLACE_ORDER_SUCCESS,\n        payload: response.data\n      });\n      dispatch(clearCartItems());\n      history.push('/orders/order-success');\n    } catch (error) {\n      dispatch(setAlert(JSON.stringify(error)), 'danger');\n      dispatch({\n        type: PLACE_ORDER_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\n\nlet clearCartItems = () => {\n  return dispatch => {\n    try {\n      dispatch({\n        type: CLEAR_CART_ITEMS\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}; // get All Orders\n\n\nlet getAllOrders = () => {\n  return async dispatch => {\n    try {\n      dispatch({\n        type: GET_ALL_ORDERS_REQUEST\n      });\n      let response = await Axios.get(`/order/`);\n      dispatch({\n        type: GET_ALL_ORDERS_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch(setAlert(JSON.stringify(error)), 'danger');\n      dispatch({\n        type: GET_ALL_ORDERS_FAILURE,\n        payload: error\n      });\n    }\n  };\n};\n\nexport { addToCart, incrProductQty, decrProductQty, deleteProductFromCart, placeOrder, clearCartItems, getAllOrders };","map":{"version":3,"sources":["C:/Users/HP/Desktop/G Store/client/src/redux/orders/orders.actions.js"],"names":["ADD_TO_CART_FAILURE","ADD_TO_CART_REQUEST","ADD_TO_CART_SUCCESS","CLEAR_CART_ITEMS","DECR_PRODUCT_QTY","DELETE_PRODUCT_FROM_CART","GET_ALL_ORDERS_FAILURE","GET_ALL_ORDERS_REQUEST","GET_ALL_ORDERS_SUCCESS","INCR_PRODUCT_QTY","PLACE_ORDER_FAILURE","PLACE_ORDER_REQUEST","PLACE_ORDER_SUCCESS","STRIPE_PAYMENT_FAILURE","STRIPE_PAYMENT_REQUEST","STRIPE_PAYMENT_SUCCESS","Axios","setAlert","addToCart","selectedProduct","qty","history","dispatch","type","theProduct","Number","payload","push","error","incrProductQty","productId","console","log","decrProductQty","deleteProductFromCart","placeOrder","order","config","headers","response","post","JSON","stringify","data","clearCartItems","getAllOrders","get"],"mappings":"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","sourcesContent":["\r\n// add to Cart\r\nimport {\r\n    ADD_TO_CART_FAILURE,\r\n    ADD_TO_CART_REQUEST,\r\n    ADD_TO_CART_SUCCESS, CLEAR_CART_ITEMS,\r\n    DECR_PRODUCT_QTY, DELETE_PRODUCT_FROM_CART, GET_ALL_ORDERS_FAILURE, GET_ALL_ORDERS_REQUEST, GET_ALL_ORDERS_SUCCESS,\r\n    INCR_PRODUCT_QTY, PLACE_ORDER_FAILURE, PLACE_ORDER_REQUEST, PLACE_ORDER_SUCCESS\r\n} from \"./orders.actionTypes\";\r\nimport {STRIPE_PAYMENT_FAILURE, STRIPE_PAYMENT_REQUEST, STRIPE_PAYMENT_SUCCESS} from \"../products/products.actionTypes\";\r\nimport Axios from \"axios\";\r\nimport {setAlert} from \"../layout/layout.actions\";\r\n\r\n// add an item to cart\r\nlet addToCart = (selectedProduct , qty , history) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({type : ADD_TO_CART_REQUEST});\r\n            let theProduct = {\r\n               ...selectedProduct,\r\n               qty : (qty === '') ? 1 : Number(qty)\r\n            };\r\n            dispatch({type : ADD_TO_CART_SUCCESS, payload : theProduct});\r\n            history.push('/orders/cart');\r\n        }\r\n        catch (error) {\r\n            dispatch({type : ADD_TO_CART_FAILURE, payload : error});\r\n        }\r\n    };\r\n};\r\n\r\n// incrProductQty\r\nlet incrProductQty = (productId) => {\r\n    return  async (dispatch) => {\r\n        try {\r\n            dispatch({type : INCR_PRODUCT_QTY , payload : {productId : productId}});\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n};\r\n\r\n// decrProductQty\r\nlet decrProductQty = (productId) => {\r\n    return  async (dispatch) => {\r\n        try {\r\n            dispatch({type : DECR_PRODUCT_QTY , payload : {productId : productId}});\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n};\r\n\r\n// delete Product From Cart\r\nlet deleteProductFromCart = (productId) => {\r\n    return  async (dispatch) => {\r\n        try {\r\n            dispatch({type : DELETE_PRODUCT_FROM_CART , payload : {productId : productId}});\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n};\r\n\r\n// place an Order\r\nlet placeOrder = (order, history) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            let config = {\r\n                headers : {\r\n                    'Content-Type' : 'application/json'\r\n                }\r\n            };\r\n            dispatch({type : PLACE_ORDER_REQUEST});\r\n            let response = await Axios.post(`/order/`, JSON.stringify(order) , config);\r\n            dispatch({ type : PLACE_ORDER_SUCCESS , payload : response.data});\r\n            dispatch(clearCartItems());\r\n            history.push('/orders/order-success');\r\n        }\r\n        catch (error) {\r\n            dispatch(setAlert(JSON.stringify(error)) , 'danger');\r\n            dispatch({type : PLACE_ORDER_FAILURE , payload: error});\r\n        }\r\n    }\r\n};\r\n\r\nlet clearCartItems = () => {\r\n    return (dispatch) => {\r\n        try {\r\n            dispatch({type : CLEAR_CART_ITEMS});\r\n        }\r\n        catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n};\r\n\r\n// get All Orders\r\nlet getAllOrders = () => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch({type : GET_ALL_ORDERS_REQUEST});\r\n            let response = await Axios.get(`/order/`);\r\n            dispatch({ type : GET_ALL_ORDERS_SUCCESS , payload : response.data});\r\n        }\r\n        catch (error) {\r\n            dispatch(setAlert(JSON.stringify(error)) , 'danger');\r\n            dispatch({type : GET_ALL_ORDERS_FAILURE , payload: error});\r\n        }\r\n    }\r\n};\r\n\r\nexport {\r\n        addToCart,\r\n        incrProductQty ,\r\n        decrProductQty,\r\n        deleteProductFromCart,\r\n        placeOrder,\r\n        clearCartItems,\r\n        getAllOrders};\r\n"]},"metadata":{},"sourceType":"module"}