{"ast":null,"code":"import { ADD_TO_CART_FAILURE, ADD_TO_CART_REQUEST, ADD_TO_CART_SUCCESS, CLEAR_CART_ITEMS, DECR_PRODUCT_QTY, DELETE_PRODUCT_FROM_CART, GET_ALL_ORDERS_FAILURE, GET_ALL_ORDERS_REQUEST, GET_ALL_ORDERS_SUCCESS, INCR_PRODUCT_QTY, PLACE_ORDER_FAILURE, PLACE_ORDER_REQUEST, PLACE_ORDER_SUCCESS } from \"./orders.actionTypes\";\nexport const ORDER_FEATURE_KEY = 'order';\nlet initialState = {\n  loading: false,\n  cartItems: [],\n  errorMessage: '',\n  order: {},\n  orders: []\n};\n\nlet orderReducer = (state = initialState, action) => {\n  let {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case ADD_TO_CART_REQUEST:\n      return { ...state,\n        loading: true\n      };\n\n    case ADD_TO_CART_SUCCESS:\n      let exists = state.cartItems.find(cartItem => cartItem._id === payload._id);\n\n      if (!exists) {\n        return { ...state,\n          loading: false,\n          cartItems: [...state.cartItems, payload]\n        };\n      }\n\n      return { ...state,\n        loading: false,\n        cartItems: [...state.cartItems]\n      };\n\n    case ADD_TO_CART_FAILURE:\n      return { ...state,\n        loading: false,\n        errorMessage: payload\n      };\n    // incr product qty\n\n    case INCR_PRODUCT_QTY:\n      let incrCartItems = state.cartItems.map(cartItem => {\n        if (cartItem._id === payload.productId) {\n          return { ...cartItem,\n            qty: cartItem.qty + 1\n          };\n        }\n\n        return cartItem;\n      });\n      return { ...state,\n        cartItems: [...incrCartItems]\n      };\n    // decr product qty\n\n    case DECR_PRODUCT_QTY:\n      let decrCartItems = state.cartItems.map(cartItem => {\n        if (cartItem._id === payload.productId) {\n          return { ...cartItem,\n            qty: cartItem.qty - 1 > 0 ? cartItem.qty - 1 : 1\n          };\n        }\n\n        return cartItem;\n      });\n      return { ...state,\n        cartItems: [...decrCartItems]\n      };\n\n    case DELETE_PRODUCT_FROM_CART:\n      let selectedCartItems = state.cartItems.filter(cartItem => cartItem._id !== payload.productId);\n      return { ...state,\n        cartItems: [...selectedCartItems]\n      };\n    // Place An Order\n\n    case PLACE_ORDER_REQUEST:\n      return { ...state,\n        loading: true\n      };\n\n    case PLACE_ORDER_SUCCESS:\n      {\n        return { ...state,\n          loading: false,\n          order: payload.order\n        };\n      }\n\n    case PLACE_ORDER_FAILURE:\n      {\n        return { ...state,\n          loading: false,\n          errorMessage: payload\n        };\n      }\n\n    case CLEAR_CART_ITEMS:\n      {\n        return { ...state,\n          cartItems: []\n        };\n      }\n    // Get All Orders\n\n    case GET_ALL_ORDERS_REQUEST:\n      return { ...state,\n        loading: true\n      };\n\n    case GET_ALL_ORDERS_SUCCESS:\n      return { ...state,\n        loading: false,\n        orders: payload.orders\n      };\n\n    case GET_ALL_ORDERS_FAILURE:\n      {\n        return { ...state,\n          loading: false,\n          errorMessage: payload\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport { orderReducer };","map":{"version":3,"sources":["C:/Users/HP/Desktop/brainskart-react-app/client/src/redux/orders/orders.reducer.js"],"names":["ADD_TO_CART_FAILURE","ADD_TO_CART_REQUEST","ADD_TO_CART_SUCCESS","CLEAR_CART_ITEMS","DECR_PRODUCT_QTY","DELETE_PRODUCT_FROM_CART","GET_ALL_ORDERS_FAILURE","GET_ALL_ORDERS_REQUEST","GET_ALL_ORDERS_SUCCESS","INCR_PRODUCT_QTY","PLACE_ORDER_FAILURE","PLACE_ORDER_REQUEST","PLACE_ORDER_SUCCESS","ORDER_FEATURE_KEY","initialState","loading","cartItems","errorMessage","order","orders","orderReducer","state","action","type","payload","exists","find","cartItem","_id","incrCartItems","map","productId","qty","decrCartItems","selectedCartItems","filter"],"mappings":"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","sourcesContent":["import {\r\n    ADD_TO_CART_FAILURE,\r\n    ADD_TO_CART_REQUEST,\r\n    ADD_TO_CART_SUCCESS, CLEAR_CART_ITEMS,\r\n    DECR_PRODUCT_QTY, DELETE_PRODUCT_FROM_CART, GET_ALL_ORDERS_FAILURE, GET_ALL_ORDERS_REQUEST, GET_ALL_ORDERS_SUCCESS,\r\n    INCR_PRODUCT_QTY, PLACE_ORDER_FAILURE, PLACE_ORDER_REQUEST, PLACE_ORDER_SUCCESS\r\n} from \"./orders.actionTypes\";\r\n\r\nexport const ORDER_FEATURE_KEY = 'order';\r\n\r\nlet initialState = {\r\n    loading : false,\r\n    cartItems : [],\r\n    errorMessage : '',\r\n    order : {},\r\n    orders : []\r\n};\r\n\r\nlet orderReducer = (state = initialState , action) => {\r\n    let {type , payload} = action;\r\n    switch(type) {\r\n        case ADD_TO_CART_REQUEST:\r\n            return  {\r\n              ...state,\r\n              loading: true\r\n            };\r\n        case ADD_TO_CART_SUCCESS:\r\n            let exists = state.cartItems.find(cartItem => cartItem._id === payload._id);\r\n            if(!exists){\r\n                return  {\r\n                    ...state,\r\n                    loading: false,\r\n                    cartItems: [...state.cartItems, payload]\r\n                };\r\n            }\r\n            return  {\r\n                ...state,\r\n                loading: false,\r\n                cartItems: [...state.cartItems]\r\n            };\r\n        case ADD_TO_CART_FAILURE:\r\n            return  {\r\n                ...state,\r\n                loading: false,\r\n                errorMessage: payload\r\n            };\r\n        // incr product qty\r\n        case INCR_PRODUCT_QTY:\r\n            let incrCartItems = state.cartItems.map(cartItem => {\r\n                if(cartItem._id === payload.productId){\r\n                    return {\r\n                        ...cartItem,\r\n                        qty : cartItem.qty + 1\r\n                    }\r\n                }\r\n                return  cartItem;\r\n            });\r\n            return {\r\n                ...state,\r\n                cartItems: [...incrCartItems]\r\n            };\r\n        // decr product qty\r\n        case DECR_PRODUCT_QTY:\r\n            let decrCartItems = state.cartItems.map(cartItem => {\r\n                if(cartItem._id === payload.productId){\r\n                    return {\r\n                        ...cartItem,\r\n                        qty : (cartItem.qty - 1 > 0) ? cartItem.qty - 1 : 1\r\n                    }\r\n                }\r\n                return  cartItem;\r\n            });\r\n            return {\r\n                ...state,\r\n                cartItems: [...decrCartItems]\r\n            };\r\n        case DELETE_PRODUCT_FROM_CART:\r\n            let selectedCartItems = state.cartItems.filter(cartItem => cartItem._id !== payload.productId);\r\n            return {\r\n                ...state,\r\n                cartItems: [...selectedCartItems]\r\n            };\r\n        // Place An Order\r\n        case PLACE_ORDER_REQUEST :\r\n            return  {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        case PLACE_ORDER_SUCCESS:{\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                order : payload.order\r\n            }\r\n        }\r\n        case PLACE_ORDER_FAILURE:{\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                errorMessage: payload\r\n            };\r\n        }\r\n        case CLEAR_CART_ITEMS : {\r\n            return {\r\n                ...state,\r\n                cartItems: []\r\n            }\r\n        }\r\n        // Get All Orders\r\n        case GET_ALL_ORDERS_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        case GET_ALL_ORDERS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                orders : payload.orders\r\n            };\r\n        case GET_ALL_ORDERS_FAILURE:{\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                errorMessage: payload\r\n            };\r\n        }\r\n        default: return state;\r\n    }\r\n};\r\nexport {orderReducer};\r\n"]},"metadata":{},"sourceType":"module"}